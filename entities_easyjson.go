// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package rae

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae(in *jlexer.Lexer, out *WordEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "word":
			out.Word = string(in.String())
		case "meanings":
			if in.IsNull() {
				in.Skip()
				out.Meanings = nil
			} else {
				in.Delim('[')
				if out.Meanings == nil {
					if !in.IsDelim(']') {
						out.Meanings = make([]Meaning, 0, 1)
					} else {
						out.Meanings = []Meaning{}
					}
				} else {
					out.Meanings = (out.Meanings)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Meaning
					(v1).UnmarshalEasyJSON(in)
					out.Meanings = append(out.Meanings, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "suggestions":
			if in.IsNull() {
				in.Skip()
				out.Suggestions = nil
			} else {
				in.Delim('[')
				if out.Suggestions == nil {
					if !in.IsDelim(']') {
						out.Suggestions = make([]string, 0, 4)
					} else {
						out.Suggestions = []string{}
					}
				} else {
					out.Suggestions = (out.Suggestions)[:0]
				}
				for !in.IsDelim(']') {
					var v2 string
					v2 = string(in.String())
					out.Suggestions = append(out.Suggestions, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae(out *jwriter.Writer, in WordEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"word\":"
		out.RawString(prefix[1:])
		out.String(string(in.Word))
	}
	{
		const prefix string = ",\"meanings\":"
		out.RawString(prefix)
		if in.Meanings == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Meanings {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"suggestions\":"
		out.RawString(prefix)
		if in.Suggestions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Suggestions {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WordEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WordEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WordEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WordEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae1(in *jlexer.Lexer, out *Meaning) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "origin":
			if in.IsNull() {
				in.Skip()
				out.Origin = nil
			} else {
				if out.Origin == nil {
					out.Origin = new(Origin)
				}
				easyjson3e8ab7adDecodeGithubComRaeApiComGoRae2(in, out.Origin)
			}
		case "senses":
			if in.IsNull() {
				in.Skip()
				out.Definitions = nil
			} else {
				in.Delim('[')
				if out.Definitions == nil {
					if !in.IsDelim(']') {
						out.Definitions = make([]Definition, 0, 0)
					} else {
						out.Definitions = []Definition{}
					}
				} else {
					out.Definitions = (out.Definitions)[:0]
				}
				for !in.IsDelim(']') {
					var v7 Definition
					(v7).UnmarshalEasyJSON(in)
					out.Definitions = append(out.Definitions, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "conjugations":
			if in.IsNull() {
				in.Skip()
				out.Conjugations = nil
			} else {
				if out.Conjugations == nil {
					out.Conjugations = new(Conjugations)
				}
				(*out.Conjugations).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae1(out *jwriter.Writer, in Meaning) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Origin != nil {
		const prefix string = ",\"origin\":"
		first = false
		out.RawString(prefix[1:])
		easyjson3e8ab7adEncodeGithubComRaeApiComGoRae2(out, *in.Origin)
	}
	{
		const prefix string = ",\"senses\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Definitions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Definitions {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.Conjugations != nil {
		const prefix string = ",\"conjugations\":"
		out.RawString(prefix)
		(*in.Conjugations).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Meaning) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Meaning) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Meaning) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Meaning) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae1(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae2(in *jlexer.Lexer, out *Origin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "raw":
			out.Raw = string(in.String())
		case "type":
			out.Type = OriginType(in.String())
		case "voice":
			out.Voice = VoiceType(in.String())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae2(out *jwriter.Writer, in Origin) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"raw\":"
		out.RawString(prefix[1:])
		out.String(string(in.Raw))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"voice\":"
		out.RawString(prefix)
		out.String(string(in.Voice))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae3(in *jlexer.Lexer, out *Locution) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "definition":
			out.Definition = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae3(out *jwriter.Writer, in Locution) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"definition\":"
		out.RawString(prefix)
		out.String(string(in.Definition))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Locution) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Locution) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Locution) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Locution) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae3(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae4(in *jlexer.Lexer, out *Definition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "raw":
			out.Raw = string(in.String())
		case "meaning_number":
			out.MeaningNumber = int(in.Int())
		case "category":
			out.Category = WordCategory(in.String())
		case "verb_category":
			if in.IsNull() {
				in.Skip()
				out.VerbCategory = nil
			} else {
				if out.VerbCategory == nil {
					out.VerbCategory = new(VerbCategory)
				}
				*out.VerbCategory = VerbCategory(in.String())
			}
		case "gender":
			if in.IsNull() {
				in.Skip()
				out.Gender = nil
			} else {
				if out.Gender == nil {
					out.Gender = new(Gender)
				}
				*out.Gender = Gender(in.String())
			}
		case "article":
			if in.IsNull() {
				in.Skip()
				out.Article = nil
			} else {
				if out.Article == nil {
					out.Article = new(Article)
				}
				(*out.Article).UnmarshalEasyJSON(in)
			}
		case "usage":
			out.Usage = Usage(in.String())
		case "description":
			out.Description = string(in.String())
		case "synonyms":
			if in.IsNull() {
				in.Skip()
				out.Synonyms = nil
			} else {
				in.Delim('[')
				if out.Synonyms == nil {
					if !in.IsDelim(']') {
						out.Synonyms = make([]string, 0, 4)
					} else {
						out.Synonyms = []string{}
					}
				} else {
					out.Synonyms = (out.Synonyms)[:0]
				}
				for !in.IsDelim(']') {
					var v10 string
					v10 = string(in.String())
					out.Synonyms = append(out.Synonyms, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "antonyms":
			if in.IsNull() {
				in.Skip()
				out.Antonyms = nil
			} else {
				in.Delim('[')
				if out.Antonyms == nil {
					if !in.IsDelim(']') {
						out.Antonyms = make([]string, 0, 4)
					} else {
						out.Antonyms = []string{}
					}
				} else {
					out.Antonyms = (out.Antonyms)[:0]
				}
				for !in.IsDelim(']') {
					var v11 string
					v11 = string(in.String())
					out.Antonyms = append(out.Antonyms, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae4(out *jwriter.Writer, in Definition) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"raw\":"
		out.RawString(prefix[1:])
		out.String(string(in.Raw))
	}
	{
		const prefix string = ",\"meaning_number\":"
		out.RawString(prefix)
		out.Int(int(in.MeaningNumber))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	if in.VerbCategory != nil {
		const prefix string = ",\"verb_category\":"
		out.RawString(prefix)
		out.String(string(*in.VerbCategory))
	}
	if in.Gender != nil {
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(*in.Gender))
	}
	if in.Article != nil {
		const prefix string = ",\"article\":"
		out.RawString(prefix)
		(*in.Article).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"usage\":"
		out.RawString(prefix)
		out.String(string(in.Usage))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"synonyms\":"
		out.RawString(prefix)
		if in.Synonyms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Synonyms {
				if v12 > 0 {
					out.RawByte(',')
				}
				out.String(string(v13))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"antonyms\":"
		out.RawString(prefix)
		if in.Antonyms == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Antonyms {
				if v14 > 0 {
					out.RawByte(',')
				}
				out.String(string(v15))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Definition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Definition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Definition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Definition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae4(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae5(in *jlexer.Lexer, out *Conjugations) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "non_personal":
			(out.ConjugationNonPersonal).UnmarshalEasyJSON(in)
		case "indicative":
			(out.ConjugationIndicative).UnmarshalEasyJSON(in)
		case "subjunctive":
			(out.ConjugationSubjunctive).UnmarshalEasyJSON(in)
		case "imperative":
			(out.ConjugationImperative).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae5(out *jwriter.Writer, in Conjugations) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"non_personal\":"
		out.RawString(prefix[1:])
		(in.ConjugationNonPersonal).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"indicative\":"
		out.RawString(prefix)
		(in.ConjugationIndicative).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"subjunctive\":"
		out.RawString(prefix)
		(in.ConjugationSubjunctive).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"imperative\":"
		out.RawString(prefix)
		(in.ConjugationImperative).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conjugations) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conjugations) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conjugations) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conjugations) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae5(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae6(in *jlexer.Lexer, out *ConjugationSubjunctive) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "present":
			(out.Present).UnmarshalEasyJSON(in)
		case "present_perfect":
			(out.PresentPerfect).UnmarshalEasyJSON(in)
		case "imperfect":
			(out.Imperfect).UnmarshalEasyJSON(in)
		case "past_perfect":
			(out.PastPerfect).UnmarshalEasyJSON(in)
		case "future":
			(out.Future).UnmarshalEasyJSON(in)
		case "future_perfect":
			(out.FuturePerfect).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae6(out *jwriter.Writer, in ConjugationSubjunctive) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"present\":"
		out.RawString(prefix[1:])
		(in.Present).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"present_perfect\":"
		out.RawString(prefix)
		(in.PresentPerfect).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"imperfect\":"
		out.RawString(prefix)
		(in.Imperfect).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"past_perfect\":"
		out.RawString(prefix)
		(in.PastPerfect).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"future\":"
		out.RawString(prefix)
		(in.Future).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"future_perfect\":"
		out.RawString(prefix)
		(in.FuturePerfect).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConjugationSubjunctive) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConjugationSubjunctive) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConjugationSubjunctive) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConjugationSubjunctive) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae6(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae7(in *jlexer.Lexer, out *ConjugationNonPersonal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "infinitive":
			out.Infinitive = string(in.String())
		case "participle":
			out.Participle = string(in.String())
		case "gerund":
			out.Gerund = string(in.String())
		case "compound_infinitive":
			out.CompoundInfinitive = string(in.String())
		case "compound_gerund":
			out.CompoundGerund = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae7(out *jwriter.Writer, in ConjugationNonPersonal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"infinitive\":"
		out.RawString(prefix[1:])
		out.String(string(in.Infinitive))
	}
	{
		const prefix string = ",\"participle\":"
		out.RawString(prefix)
		out.String(string(in.Participle))
	}
	{
		const prefix string = ",\"gerund\":"
		out.RawString(prefix)
		out.String(string(in.Gerund))
	}
	{
		const prefix string = ",\"compound_infinitive\":"
		out.RawString(prefix)
		out.String(string(in.CompoundInfinitive))
	}
	{
		const prefix string = ",\"compound_gerund\":"
		out.RawString(prefix)
		out.String(string(in.CompoundGerund))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConjugationNonPersonal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConjugationNonPersonal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConjugationNonPersonal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConjugationNonPersonal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae7(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae8(in *jlexer.Lexer, out *ConjugationIndicative) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "present":
			(out.Present).UnmarshalEasyJSON(in)
		case "present_perfect":
			(out.PresentPerfect).UnmarshalEasyJSON(in)
		case "imperfect":
			(out.Imperfect).UnmarshalEasyJSON(in)
		case "past_perfect":
			(out.PastPerfect).UnmarshalEasyJSON(in)
		case "preterite":
			(out.Preterite).UnmarshalEasyJSON(in)
		case "past_anterior":
			(out.PastAnterior).UnmarshalEasyJSON(in)
		case "future":
			(out.Future).UnmarshalEasyJSON(in)
		case "future_perfect":
			(out.FuturePerfect).UnmarshalEasyJSON(in)
		case "conditional":
			(out.Conditional).UnmarshalEasyJSON(in)
		case "conditional_perfect":
			(out.ConditionalPerfect).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae8(out *jwriter.Writer, in ConjugationIndicative) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"present\":"
		out.RawString(prefix[1:])
		(in.Present).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"present_perfect\":"
		out.RawString(prefix)
		(in.PresentPerfect).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"imperfect\":"
		out.RawString(prefix)
		(in.Imperfect).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"past_perfect\":"
		out.RawString(prefix)
		(in.PastPerfect).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"preterite\":"
		out.RawString(prefix)
		(in.Preterite).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"past_anterior\":"
		out.RawString(prefix)
		(in.PastAnterior).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"future\":"
		out.RawString(prefix)
		(in.Future).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"future_perfect\":"
		out.RawString(prefix)
		(in.FuturePerfect).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"conditional\":"
		out.RawString(prefix)
		(in.Conditional).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"conditional_perfect\":"
		out.RawString(prefix)
		(in.ConditionalPerfect).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConjugationIndicative) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConjugationIndicative) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConjugationIndicative) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConjugationIndicative) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae8(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae9(in *jlexer.Lexer, out *ConjugationImperative) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "singular_second_person":
			out.SingularSecondPerson = string(in.String())
		case "singular_formal_second_person":
			out.SingularFormalSecondPerson = string(in.String())
		case "plural_second_person":
			out.PluralSecondPerson = string(in.String())
		case "plural_formal_second_person":
			out.PluralFormalSecondPerson = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae9(out *jwriter.Writer, in ConjugationImperative) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"singular_second_person\":"
		out.RawString(prefix[1:])
		out.String(string(in.SingularSecondPerson))
	}
	{
		const prefix string = ",\"singular_formal_second_person\":"
		out.RawString(prefix)
		out.String(string(in.SingularFormalSecondPerson))
	}
	{
		const prefix string = ",\"plural_second_person\":"
		out.RawString(prefix)
		out.String(string(in.PluralSecondPerson))
	}
	{
		const prefix string = ",\"plural_formal_second_person\":"
		out.RawString(prefix)
		out.String(string(in.PluralFormalSecondPerson))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConjugationImperative) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConjugationImperative) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConjugationImperative) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConjugationImperative) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae9(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae10(in *jlexer.Lexer, out *Conjugation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "singular_first_person":
			out.SingularFirstPerson = string(in.String())
		case "singular_second_person":
			out.SingularSecondPerson = string(in.String())
		case "singular_formal_second_person":
			out.SingularFormalSecondPerson = string(in.String())
		case "singular_third_person":
			out.SingularThirdPerson = string(in.String())
		case "plural_first_person":
			out.PluralFirstPerson = string(in.String())
		case "plural_second_person":
			out.PluralSecondPerson = string(in.String())
		case "plural_formal_second_person":
			out.PluralFormalSecondPerson = string(in.String())
		case "plural_third_person":
			out.PluralThirdPerson = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae10(out *jwriter.Writer, in Conjugation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"singular_first_person\":"
		out.RawString(prefix[1:])
		out.String(string(in.SingularFirstPerson))
	}
	{
		const prefix string = ",\"singular_second_person\":"
		out.RawString(prefix)
		out.String(string(in.SingularSecondPerson))
	}
	{
		const prefix string = ",\"singular_formal_second_person\":"
		out.RawString(prefix)
		out.String(string(in.SingularFormalSecondPerson))
	}
	{
		const prefix string = ",\"singular_third_person\":"
		out.RawString(prefix)
		out.String(string(in.SingularThirdPerson))
	}
	{
		const prefix string = ",\"plural_first_person\":"
		out.RawString(prefix)
		out.String(string(in.PluralFirstPerson))
	}
	{
		const prefix string = ",\"plural_second_person\":"
		out.RawString(prefix)
		out.String(string(in.PluralSecondPerson))
	}
	{
		const prefix string = ",\"plural_formal_second_person\":"
		out.RawString(prefix)
		out.String(string(in.PluralFormalSecondPerson))
	}
	{
		const prefix string = ",\"plural_third_person\":"
		out.RawString(prefix)
		out.String(string(in.PluralThirdPerson))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Conjugation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Conjugation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Conjugation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Conjugation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae10(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae11(in *jlexer.Lexer, out *Article) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category":
			out.Category = ArticleCategory(in.String())
		case "gender":
			out.Gender = Gender(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae11(out *jwriter.Writer, in Article) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"gender\":"
		out.RawString(prefix)
		out.String(string(in.Gender))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Article) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Article) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Article) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Article) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae11(l, v)
}
func easyjson3e8ab7adDecodeGithubComRaeApiComGoRae12(in *jlexer.Lexer, out *AdditionalSense) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "number":
			out.Number = int(in.Int())
		case "definition":
			out.Definition = string(in.String())
		case "locutions":
			if in.IsNull() {
				in.Skip()
				out.Locutions = nil
			} else {
				in.Delim('[')
				if out.Locutions == nil {
					if !in.IsDelim(']') {
						out.Locutions = make([]Locution, 0, 2)
					} else {
						out.Locutions = []Locution{}
					}
				} else {
					out.Locutions = (out.Locutions)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Locution
					(v16).UnmarshalEasyJSON(in)
					out.Locutions = append(out.Locutions, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3e8ab7adEncodeGithubComRaeApiComGoRae12(out *jwriter.Writer, in AdditionalSense) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"number\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Number))
	}
	{
		const prefix string = ",\"definition\":"
		out.RawString(prefix)
		out.String(string(in.Definition))
	}
	{
		const prefix string = ",\"locutions\":"
		out.RawString(prefix)
		if in.Locutions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Locutions {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AdditionalSense) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AdditionalSense) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3e8ab7adEncodeGithubComRaeApiComGoRae12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AdditionalSense) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AdditionalSense) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3e8ab7adDecodeGithubComRaeApiComGoRae12(l, v)
}
